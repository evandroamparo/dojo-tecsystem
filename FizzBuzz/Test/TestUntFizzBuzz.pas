unit TestUntFizzBuzz;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, UntFizzBuzz;

type
  // Test methods for class TFizzBuzz

  TestTFizzBuzz = class(TTestCase)
  strict private
    FFizzBuzz: TFizzBuzz;
  private

  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestValor1TemQueRetornar1;
    procedure TestValor3TemQueRetornarFizz;
    procedure TestValor5TemQueRetornarBuzz;
    procedure TestValor15TemQueRetornarFizzBuzz;
  end;

implementation

procedure TestTFizzBuzz.SetUp;
begin
  FFizzBuzz := TFizzBuzz.Create;
end;

procedure TestTFizzBuzz.TearDown;
begin
  FFizzBuzz.Free;
  FFizzBuzz := nil;
end;

procedure TestTFizzBuzz.TestValor1TemQueRetornar1;
var
  ReturnValue: string;
  n: Integer;
begin
  // TODO: Setup method call parameters
  n := 1;
  ReturnValue := FFizzBuzz.ToString(n);
  Assert(ReturnValue = '1', 'O valor retorno de 1 está incorreto.');
end;

procedure TestTFizzBuzz.TestValor3TemQueRetornarFizz;
var
  ReturnValue: string;
  n: Integer;
begin
  n := 3;
  ReturnValue := FFizzBuzz.ToString(n);
  Assert(ReturnValue = 'Fizz', 'O valor está incorreto.');
end;

procedure TestTFizzBuzz.TestValor5TemQueRetornarBuzz;
var
  ReturnValue: string;
  n: Integer;
begin
  n := 5;
  ReturnValue := FFizzBuzz.ToString(n);
  Assert(ReturnValue = 'Buzz', 'O valor está incorreto.');
end;

procedure TestTFizzBuzz.TestValor15TemQueRetornarFizzBuzz;
var
  ReturnValue: string;
  n: Integer;
begin
  n := 15;
  ReturnValue := FFizzBuzz.ToString(n);
  Assert(ReturnValue = 'Fizz Buzz', 'O valor está incorreto.');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTFizzBuzz.Suite);
end.

